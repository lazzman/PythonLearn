#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import functools

'''
偏函数

Python的functools模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。

在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下：

int()函数可以把字符串转换为整数，当仅传入字符串时，int()函数默认按十进制转换：
------------------------------------------------------
>>> int('12345')
12345
------------------------------------------------------

但int()函数还提供额外的base参数，默认值为10。如果传入base参数，就可以做N进制的转换：
------------------------------------------------------
>>> int('12345', base=8)
5349
>>> int('12345', 16)
74565
------------------------------------------------------

假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：
------------------------------------------------------
def int2(x, base=2):
    return int(x, base)
------------------------------------------------------

这样，我们转换二进制就非常方便了：
------------------------------------------------------
>>> int2('1000000')
64
>>> int2('1010101')
85
------------------------------------------------------
functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：
'''
int2 = functools.partial(int, base=2)

print('1000000 =', int2('1000000'))
print('1010101 =', int2('1010101'))
